// <auto-generated />
using System;
using Neira.Bot;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Neira.Bot.Migrations
{
    [DbContext(typeof(FailsafeContext))]
    [Migration("20190913104107_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Bot.Models.Db.ActiveMilestone", b =>
                {
                    b.Property<ulong>("MessageId");

                    b.Property<DateTime>("DateExpire");

                    b.Property<ulong>("GuildId");

                    b.Property<ulong>("Leader");

                    b.Property<string>("Memo")
                        .HasMaxLength(1000);

                    b.Property<int>("MilestoneId");

                    b.Property<ulong>("TextChannelId");

                    b.HasKey("MessageId");

                    b.HasIndex("MilestoneId");

                    b.ToTable("ActiveMilestones");
                });

            modelBuilder.Entity("Bot.Models.Db.Catalyst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bonus")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("DropLocation")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Masterwork")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("WeaponName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Catalysts");
                });

            modelBuilder.Entity("Bot.Models.Db.Clan", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("About");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<long>("MemberCount");

                    b.Property<string>("Motto");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("Bot.Models.Db.Clan_Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BungieMembershipId");

                    b.Property<long?>("BungieMembershipType");

                    b.Property<long>("ClanId");

                    b.Property<DateTimeOffset?>("ClanJoinDate");

                    b.Property<DateTimeOffset?>("DateLastPlayed");

                    b.Property<string>("DestinyMembershipId");

                    b.Property<long>("DestinyMembershipType");

                    b.Property<string>("IconPath");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.ToTable("Clan_Members");
                });

            modelBuilder.Entity("Bot.Models.Db.Gear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("DropLocation")
                        .HasMaxLength(300);

                    b.Property<string>("IconUrl")
                        .HasMaxLength(1000);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Perk")
                        .HasMaxLength(100);

                    b.Property<string>("PerkDescription")
                        .HasMaxLength(1024);

                    b.Property<string>("SecondPerk")
                        .HasMaxLength(100);

                    b.Property<string>("SecondPerkDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<bool>("isHaveCatalyst");

                    b.Property<bool>("isWeapon");

                    b.HasKey("Id");

                    b.ToTable("Gears");
                });

            modelBuilder.Entity("Bot.Models.Db.Guild", b =>
                {
                    b.Property<ulong>("Id");

                    b.Property<ulong>("AutoroleID");

                    b.Property<string>("CommandPrefix");

                    b.Property<string>("GlobalMention");

                    b.Property<string>("LeaveMessage");

                    b.Property<ulong>("LoggingChannel");

                    b.Property<ulong>("NotificationChannel");

                    b.Property<ulong>("WelcomeChannel");

                    b.Property<string>("WelcomeMessage");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Bot.Models.Db.Milestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .HasMaxLength(50);

                    b.Property<string>("Icon")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("PreviewDesc")
                        .HasMaxLength(1024);

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("Bot.Models.Db.MilestoneUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("MessageId");

                    b.Property<ulong>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MilestoneUsers");
                });

            modelBuilder.Entity("Bot.Models.Db.ActiveMilestone", b =>
                {
                    b.HasOne("Bot.Models.Db.Milestone", "Milestone")
                        .WithMany("ActiveMilestones")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bot.Models.Db.Clan_Member", b =>
                {
                    b.HasOne("Bot.Models.Db.Clan", "Clan")
                        .WithMany("Members")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bot.Models.Db.MilestoneUser", b =>
                {
                    b.HasOne("Bot.Models.Db.ActiveMilestone", "ActiveMilestone")
                        .WithMany("MilestoneUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
