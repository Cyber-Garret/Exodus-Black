// <auto-generated />
using System;
using Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Migrations
{
    [DbContext(typeof(FailsafeContext))]
    [Migration("20190611135329_V3")]
    partial class V3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Models.Db.Catalyst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalystBonus");

                    b.Property<string>("CatalystLocation");

                    b.Property<string>("CatalystQuest");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("WeaponName");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Catalysts");
                });

            modelBuilder.Entity("Core.Models.Db.Catalyst_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Catalyst_Categories");
                });

            modelBuilder.Entity("Core.Models.Db.Destiny2Clan", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("About");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<long>("MemberCount");

                    b.Property<string>("Motto");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Destiny2Clans");
                });

            modelBuilder.Entity("Core.Models.Db.Destiny2Clan_Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BungieMembershipId");

                    b.Property<long?>("BungieMembershipType");

                    b.Property<DateTimeOffset?>("ClanJoinDate");

                    b.Property<DateTimeOffset?>("DateLastPlayed");

                    b.Property<long>("Destiny2ClanId");

                    b.Property<string>("DestinyMembershipId");

                    b.Property<long>("DestinyMembershipType");

                    b.Property<string>("IconPath");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Destiny2ClanId");

                    b.ToTable("Destiny2Clan_Members");
                });

            modelBuilder.Entity("Core.Models.Db.Gear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Catalyst");

                    b.Property<string>("CatalystBonus");

                    b.Property<string>("CatalystQuest");

                    b.Property<string>("Description");

                    b.Property<string>("DropLocation");

                    b.Property<string>("IconUrl");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("PerkDescription");

                    b.Property<string>("PerkName");

                    b.Property<string>("SecondPerkDescription");

                    b.Property<string>("SecondPerkName");

                    b.Property<string>("Type");

                    b.Property<string>("WhereCatalystDrop");

                    b.HasKey("Id");

                    b.ToTable("Gears");
                });

            modelBuilder.Entity("Core.Models.Db.Guild", b =>
                {
                    b.Property<decimal>("ID")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<bool>("EnableLogging")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableNotification")
                        .HasDefaultValue(false);

                    b.Property<decimal>("LoggingChannel")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NotificationChannel")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasDefaultValue(0m);

                    b.Property<string>("WelcomeMessage");

                    b.HasKey("ID");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Core.Models.Db.Catalyst", b =>
                {
                    b.HasOne("Core.Models.Db.Catalyst_Category", "Category")
                        .WithMany("Catalysts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Db.Destiny2Clan_Member", b =>
                {
                    b.HasOne("Core.Models.Db.Destiny2Clan", "Destiny2Clan")
                        .WithMany("Members")
                        .HasForeignKey("Destiny2ClanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
